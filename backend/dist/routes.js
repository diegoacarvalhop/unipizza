"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.router = void 0;
const express_1 = require("express");
const multer_1 = __importDefault(require("multer"));
const CreateUserController_1 = require("./controllers/user/CreateUserController");
const AuthUserController_1 = require("./controllers/user/AuthUserController");
const DetailUserController_1 = require("./controllers/user/DetailUserController");
const isAuthenticated_1 = require("./middlewares/isAuthenticated");
const CreateCategoryController_1 = require("./controllers/category/CreateCategoryController");
const FindCategoryController_1 = require("./controllers/category/FindCategoryController");
const ListCategoryController_1 = require("./controllers/category/ListCategoryController");
const EditCategoryController_1 = require("./controllers/category/EditCategoryController");
const DisableCategoryController_1 = require("./controllers/category/DisableCategoryController");
const CreateProductController_1 = require("./controllers/product/CreateProductController");
const multer_2 = __importDefault(require("./config/multer"));
const FindProductController_1 = require("./controllers/product/FindProductController");
const ListByCategoryController_1 = require("./controllers/product/ListByCategoryController");
const ListProductController_1 = require("./controllers/product/ListProductController");
const EditProductController_1 = require("./controllers/product/EditProductController");
const DisableProductController_1 = require("./controllers/product/DisableProductController");
const CreateOrderController_1 = require("./controllers/order/CreateOrderController");
const DeleteOrderController_1 = require("./controllers/order/DeleteOrderController");
const AddItemController_1 = require("./controllers/order/AddItemController");
const RemoveItemController_1 = require("./controllers/order/RemoveItemController");
const SendOrderController_1 = require("./controllers/order/SendOrderController");
const ListOrderController_1 = require("./controllers/order/ListOrderController");
const ShowOrderDetailController_1 = require("./controllers/order/ShowOrderDetailController");
const FinishOrderController_1 = require("./controllers/order/FinishOrderController");
const CreateTableController_1 = require("./controllers/table/CreateTableController");
const ListTableController_1 = require("./controllers/table/ListTableController");
const BusyTableController_1 = require("./controllers/table/BusyTableController");
const DisableTableController_1 = require("./controllers/table/DisableTableController");
const CreatePaymentController_1 = require("./controllers/payment/CreatePaymentController");
const ListTableCallWaiterController_1 = require("./controllers/table/ListTableCallWaiterController");
const UpdateTableController_1 = require("./controllers/table/UpdateTableController");
const ListTableCloseBillController_1 = require("./controllers/table/ListTableCloseBillController");
const DeletePaymentController_1 = require("./controllers/payment/DeletePaymentController");
const FinishPaymentController_1 = require("./controllers/payment/FinishPaymentController");
const ListUserController_1 = require("./controllers/user/ListUserController");
const DisableUserController_1 = require("./controllers/user/DisableUserController");
const UpdateUserController_1 = require("./controllers/user/UpdateUserController");
const ChangePasswordUserController_1 = require("./controllers/user/ChangePasswordUserController");
const ListProductsMenuController_1 = require("./controllers/menu/ListProductsMenuController");
const DeleteCategoryController_1 = require("./controllers/category/DeleteCategoryController");
const DeleteProductController_1 = require("./controllers/product/DeleteProductController");
const LoggedOutUserController_1 = require("./controllers/user/LoggedOutUserController");
const ListTableMenuController_1 = require("./controllers/menu/ListTableMenuController");
const CallWaiterMenuController_1 = require("./controllers/menu/CallWaiterMenuController");
const CloseBillMenuController_1 = require("./controllers/menu/CloseBillMenuController");
const ListPaymentsController_1 = require("./controllers/payment/ListPaymentsController");
const router = (0, express_1.Router)();
exports.router = router;
const upload = (0, multer_1.default)(multer_2.default.upload("./tmp"));
//Rotas USER
router.post('/users', new CreateUserController_1.CreateUserController().handle);
router.post('/session', new AuthUserController_1.AuthUserController().handle);
router.get('/userinfo', isAuthenticated_1.isAuthenticated, new DetailUserController_1.DetailUserController().handle);
router.put('/user/logout', isAuthenticated_1.isAuthenticated, new LoggedOutUserController_1.LoggedOutUserController().handle);
router.get('/users', isAuthenticated_1.isAuthenticated, new ListUserController_1.ListUserController().handle);
router.put('/user/disable', isAuthenticated_1.isAuthenticated, new DisableUserController_1.DisableUserController().handle);
router.put('/user/update', isAuthenticated_1.isAuthenticated, new UpdateUserController_1.UpdateUserController().handle);
router.put('/user/password', isAuthenticated_1.isAuthenticated, new ChangePasswordUserController_1.ChangePasswordUserController().handle);
//Rotas TABLE
router.post('/table', isAuthenticated_1.isAuthenticated, new CreateTableController_1.CreateTableController().handle);
router.get('/tables', isAuthenticated_1.isAuthenticated, new ListTableController_1.ListTableController().handle);
router.put('/table/busy', isAuthenticated_1.isAuthenticated, new BusyTableController_1.BusyTableController().handle);
router.put('/table/disable', isAuthenticated_1.isAuthenticated, new DisableTableController_1.DisableTableController().handle);
router.get('/tables/call_waiter', isAuthenticated_1.isAuthenticated, new ListTableCallWaiterController_1.ListTableCallWaiterController().handle);
router.get('/tables/close_bill', isAuthenticated_1.isAuthenticated, new ListTableCloseBillController_1.ListTableCloseBillController().handle);
router.put('/table/update', isAuthenticated_1.isAuthenticated, new UpdateTableController_1.UpdateTableController().handle);
//Rotas CATEGORY
router.post('/category', isAuthenticated_1.isAuthenticated, new CreateCategoryController_1.CreateCategoryController().handle);
router.get('/categories', isAuthenticated_1.isAuthenticated, new ListCategoryController_1.ListCategoryController().handle);
router.get('/category', isAuthenticated_1.isAuthenticated, new FindCategoryController_1.FindCategoryController().handle);
router.put('/category/update', isAuthenticated_1.isAuthenticated, new EditCategoryController_1.EditCategoryController().handle);
router.put('/category/disable', isAuthenticated_1.isAuthenticated, new DisableCategoryController_1.DisableCategoryController().handle);
router.delete('/category', isAuthenticated_1.isAuthenticated, new DeleteCategoryController_1.DeleteCategoryController().handle);
//Rotas PRODUCT
router.post('/product', isAuthenticated_1.isAuthenticated, upload.single('file'), new CreateProductController_1.CreateProductController().handle);
router.get('/product', isAuthenticated_1.isAuthenticated, new FindProductController_1.FindProductController().handle);
router.get('/product/bycategory', isAuthenticated_1.isAuthenticated, new ListByCategoryController_1.ListByCategoryController().handle);
router.get('/products', isAuthenticated_1.isAuthenticated, new ListProductController_1.ListProductController().handle);
router.put('/product/update', isAuthenticated_1.isAuthenticated, new EditProductController_1.EditProductController().handle);
router.put('/product/disable', isAuthenticated_1.isAuthenticated, new DisableProductController_1.DisableProductController().handle);
router.delete('/product', isAuthenticated_1.isAuthenticated, new DeleteProductController_1.DeleteProductController().handle);
//Rotas ORDER
router.post('/order', isAuthenticated_1.isAuthenticated, new CreateOrderController_1.CreateOrderController().handle);
router.delete('/order', isAuthenticated_1.isAuthenticated, new DeleteOrderController_1.DeleteOrderController().handle);
router.post('/order/add', isAuthenticated_1.isAuthenticated, new AddItemController_1.AddItemController().handle);
router.delete('/order/remove', isAuthenticated_1.isAuthenticated, new RemoveItemController_1.RemoveItemController().handle);
router.put('/order/send', isAuthenticated_1.isAuthenticated, new SendOrderController_1.SendOrderController().handle);
router.get('/orders', isAuthenticated_1.isAuthenticated, new ListOrderController_1.ListOrderController().handle);
router.get('/order/show', isAuthenticated_1.isAuthenticated, new ShowOrderDetailController_1.ShowOrderDetailController().handle);
router.put('/order/finish', isAuthenticated_1.isAuthenticated, new FinishOrderController_1.FinishOrderController().handle);
//Rotas PAYMENT
router.get('/payment', isAuthenticated_1.isAuthenticated, new CreatePaymentController_1.CreatePaymentController().handle);
router.delete('/payment', isAuthenticated_1.isAuthenticated, new DeletePaymentController_1.DeletePaymentController().handle);
router.put('/payment', isAuthenticated_1.isAuthenticated, new FinishPaymentController_1.FinishPaymentController().handle);
router.post('/payments', isAuthenticated_1.isAuthenticated, new ListPaymentsController_1.ListPaymentsController().handle);
//Rotas MENU
router.get('/menu', new ListProductsMenuController_1.ListProductsMenuController().handle);
router.get('/menu/categories', new ListCategoryController_1.ListCategoryController().handle);
router.get('/menu/table', new ListTableMenuController_1.ListTableMenuController().handle);
router.put('/menu/call_waiter', new CallWaiterMenuController_1.CallWaiterMenuController().handle);
router.put('/menu/close_bill', new CloseBillMenuController_1.CloseBillMenuController().handle);
